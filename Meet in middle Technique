from itertools import combinations

def get_subset_sums(arr):
    subset_sums = set()
    for r in range(len(arr) + 1):
        for combo in combinations(arr, r):
            subset_sums.add(sum(combo))
    return subset_sums

def closest_subset_sum(arr, target):
    n = len(arr)
    mid = n // 2
    
    left_half = arr[:mid]
    right_half = arr[mid:]
    
    left_sums = sorted(get_subset_sums(left_half))
    right_sums = sorted(get_subset_sums(right_half))
    
    closest_sum = float('inf')
    
    i, j = 0, len(right_sums) - 1
    
    while i < len(left_sums) and j >= 0:
        current_sum = left_sums[i] + right_sums[j]
        if abs(current_sum - target) < abs(closest_sum - target):
            closest_sum = current_sum
        
        if current_sum < target:
            i += 1
        elif current_sum > target:
            j -= 1
        else:
            return closest_sum
    
    return closest_sum

# Example inputs
print(closest_subset_sum([45, 34, 4, 12, 5, 2], 42))  # Output should be the closest subset sum to 42
print(closest_subset_sum([1, 3, 2, 7, 4, 6], 10))    # Output should be the closest subset sum to 10
