def is_safe(graph, color, v, c):
    for i in graph[v]:
        if color[i] == c:
            return False
    return True

def graph_coloring_util(graph, m, color, v):
    if v == len(graph):
        return True
    
    for c in range(1, m + 1):
        if is_safe(graph, color, v, c):
            color[v] = c
            if graph_coloring_util(graph, m, color, v + 1):
                return True
            color[v] = 0  # Backtrack
    
    return False

def graph_coloring(edges, n, k):
    graph = {i: [] for i in range(n)}
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)
    
    color = [0] * n
    if graph_coloring_util(graph, k, color, 0):
        return color
    return None

# Example usage
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
n = 4
k = 3
result = graph_coloring(edges, n, k)
if result:
    print("Coloring of the graph is possible with the given number of colors:", result)
else:
    print("Coloring of the graph is not possible with the given number of colors.")
