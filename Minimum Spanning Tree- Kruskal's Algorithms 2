def find(parent, u):
    if parent[u] != u:
        parent[u] = find(parent, parent[u])
    return parent[u]

def union(parent, rank, u, v):
    root_u = find(parent, u)
    root_v = find(parent, v)
    
    if root_u != root_v:
        if rank[root_u] > rank[root_v]:
            parent[root_v] = root_u
        elif rank[root_u] < rank[root_v]:
            parent[root_u] = root_v
        else:
            parent[root_v] = root_u
            rank[root_u] += 1
        return True
    return False

def is_unique_mst(n, edges, given_mst):
    given_mst_weight = sum(weight for _, _, weight in given_mst)
    
    parent = list(range(n))
    rank = [0] * n
    
    for u, v, weight in given_mst:
        union(parent, rank, u, v)

    calculated_weight = 0
    for u, v, weight in edges:
        if union(parent, rank, u, v):
            calculated_weight += weight
    
    if calculated_weight != given_mst_weight:
        return False, []
    
    for u, v, weight in edges:
        if (u, v, weight) not in given_mst and union(parent, rank, u, v):
            return False, given_mst

    return True, []

# Test Case 1
n = 4
edges = [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)]
given_mst = [(2, 3, 4), (0, 3, 5), (0, 1, 10)]

is_unique, alternate_mst = is_unique_mst(n, edges, given_mst)
print("Is the given MST unique?", is_unique)
if not is_unique:
    print("Another possible MST:", alternate_mst)
