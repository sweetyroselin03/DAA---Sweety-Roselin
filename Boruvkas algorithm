def find(parent, u):
    if parent[u] != u:
        parent[u] = find(parent, parent[u])
    return parent[u]

def union(parent, rank, u, v):
    root_u = find(parent, u)
    root_v = find(parent, v)

    if root_u != root_v:
        if rank[root_u] > rank[root_v]:
            parent[root_v] = root_u
        elif rank[root_u] < rank[root_v]:
            parent[root_u] = root_v
        else:
            parent[root_v] = root_u
            rank[root_u] += 1

def boruvkas_algorithm(edges, num_vertices):
    parent = list(range(num_vertices))
    rank = [0] * num_vertices
    mst_edges = []
    total_cost = 0
    num_components = num_vertices

    while num_components > 1:
        cheapest = [-1] * num_vertices

        for i, (u, v, weight) in enumerate(edges):
            set_u = find(parent, u)
            set_v = find(parent, v)

            if set_u != set_v:
                if cheapest[set_u] == -1 or cheapest[set_u][2] > weight:
                    cheapest[set_u] = (u, v, weight)
                if cheapest[set_v] == -1 or cheapest[set_v][2] > weight:
                    cheapest[set_v] = (u, v, weight)

        for entry in cheapest:
            if entry != -1:
                u, v, weight = entry
                if find(parent, u) != find(parent, v):
                    union(parent, rank, u, v)
                    mst_edges.append((u, v, weight))
                    total_cost += weight
                    num_components -= 1

    return mst_edges, total_cost

# Example graph represented as an edge list (u, v, weight)
edges = [
    (0, 1, 10),
    (0, 2, 6),
    (0, 3, 5),
    (1, 3, 15),
    (2, 3, 4)
]

num_vertices = 4

# Find the Minimum Cost Spanning Tree
mst_edges, total_cost = boruvkas_algorithm(edges, num_vertices)

# Output the edges of the MST and the total cost
print("Edges in Minimum Spanning Tree:")
for u, v, weight in mst_edges:
    print(f"{u} - {v}: {weight}")
print(f"Total cost of MST: {total_cost}")
