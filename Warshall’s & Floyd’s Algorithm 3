def floyd_warshall(times, n, k):
    INF = float('inf')
    
    # Initialize the distance matrix
    dist = [[INF] * n for _ in range(n)]
    
    # Set the distance from a node to itself as 0
    for i in range(n):
        dist[i][i] = 0
    
    # Fill initial distances based on the input edges
    for u, v, w in times:
        dist[u-1][v-1] = w
    
    # Floyd-Warshall algorithm
    for via in range(n):
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][via] + dist[via][j])
    
    # Find the maximum time to receive the signal from node k
    result = max(dist[k-1])
    
    # Return -1 if there's any node that is unreachable
    return result if result < INF else -1

# Example usage:
times = [[2,1,1],[2,3,1],[3,4,1]]
n = 4
k = 2
print(floyd_warshall(times, n, k))
