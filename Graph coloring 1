def is_safe(graph, color, v, c):
    for i in graph[v]:
        if color[i] == c:
            return False
    return True

def graph_coloring_util(graph, m, color, v):
    if v == len(graph):
        return True
    
    for c in range(1, m + 1):
        if is_safe(graph, color, v, c):
            color[v] = c
            if graph_coloring_util(graph, m, color, v + 1):
                return True
            color[v] = 0
    
    return False

def find_min_colors(graph, n):
    for m in range(1, n + 1):
        color = [0] * n
        if graph_coloring_util(graph, m, color, 0):
            return m
    return n

def maximize_personal_coloring(edges, n):
    graph = {i: [] for i in range(n)}
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)
    
    min_colors = find_min_colors(graph, n)
    color = [0] * n
    if not graph_coloring_util(graph, min_colors, color, 0):
        return 0
    
    # Simulate the coloring process
    personal_coloring_count = 0
    turn = 1
    for i in range(n):
        if color[i] == 0:  # If this vertex is uncolored
            if turn == 1:
                personal_coloring_count += 1
            turn = (turn % 3) + 1
    
    return personal_coloring_count

# Example usage
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
n = 4
print("Maximum number of regions you can color:", maximize_personal_coloring(edges, n))
