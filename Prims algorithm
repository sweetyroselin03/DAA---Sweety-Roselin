def prims_algorithm(graph):
    num_vertices = len(graph)
    selected = [False] * num_vertices
    edges = []
    
    selected[0] = True  # Start from the first vertex

    while len(edges) < num_vertices - 1:
        min_cost = float('inf')  # Initialize to infinity
        u, v = -1, -1
        
        for i in range(num_vertices):
            if selected[i]:
                for j in range(num_vertices):
                    if not selected[j] and graph[i][j] > 0:  # Valid edge
                        if graph[i][j] < min_cost:
                            min_cost = graph[i][j]
                            u, v = i, j
        
        if u != -1 and v != -1:  # Valid edge found
            selected[v] = True
            edges.append((u, v, min_cost))
    
    return edges

# Example graph represented as an adjacency matrix
graph = [
    [0, 2, 0, 6, 0],
    [2, 0, 3, 8, 5],
    [0, 3, 0, 0, 7],
    [6, 8, 0, 0, 9],
    [0, 5, 7, 9, 0]
]

# Find the Minimum Cost Spanning Tree
mst_edges = prims_algorithm(graph)

# Output the edges of the MST
print("Edges in Minimum Spanning Tree:")
for u, v, cost in mst_edges:
    print(f"{u} - {v}: {cost}")
