def is_safe(board, row, col, N, obstacles):
    if (row, col) in obstacles:
        return False
    for i in range(col):
        if board[row][i] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, N, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True

def solve_n_queens_util(board, col, N, obstacles):
    if col >= N:
        return True
    for i in range(N):
        if is_safe(board, i, col, N, obstacles):
            board[i][col] = 1
            if solve_n_queens_util(board, col + 1, N, obstacles):
                return True
            board[i][col] = 0
    return False

def solve_n_queens(N, M, obstacles=[]):
    board = [[0] * M for _ in range(N)]
    if solve_n_queens_util(board, 0, N, obstacles):
        return board
    return None
