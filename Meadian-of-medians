def median_of_medians(arr, k):
    def partition(arr, low, high):
        pivot = arr[high]
        i = low
        for j in range(low, high):
            if arr[j] <= pivot:
                arr[i], arr[j] = arr[j], arr[i]
                i += 1
        arr[i], arr[high] = arr[high], arr[i]
        return i

    def select(arr, low, high, k):
        if low == high:
            return arr[low]
        
        n = high - low + 1
        median = []
        
        # Divide arr into groups of 5 and find medians
        for i in range(0, n // 5):
            median.append(sorted(arr[low + i*5:low + i*5 + 5])[2])
        
        if n % 5 != 0:
            median.append(sorted(arr[low + (n // 5) * 5:high + 1])[len(arr[low + (n // 5) * 5:high + 1]) // 2])
        
        if len(median) == 1:
            pivot = median[0]
        else:
            pivot = select(median, 0, len(median) - 1, len(median) // 2)
        
        # Partition around pivot
        pivot_index = partition(arr, low, high)
        
        if k == pivot_index:
            return arr[k]
        elif k < pivot_index:
            return select(arr, low, pivot_index - 1, k)
        else:
            return select(arr, pivot_index + 1, high, k)
    
    return select(arr, 0, len(arr) - 1, k - 1)

# Example inputs and outputs
print("Expected Output:", median_of_medians([12, 3, 5, 7, 19], 2))  # Output: 5
print("Expected Output:", median_of_medians([12, 3, 5, 7, 4, 19, 26], 3))  # Output: 5
print("Expected Output:", median_of_medians([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))  # Output: 6
