import numpy as np

def floyd_warshall(n, edges):
    dist = np.full((n, n), np.inf)
    np.fill_diagonal(dist, 0)
    
    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w
    
    print("Initial Distance Matrix:")
    print(dist)
    
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    print("\nDistance Matrix after Floyd-Warshall Algorithm:")
    print(dist)
    
    return dist

def find_shortest_path(dist, start, end):
    return dist[start][end]

def update_distance_matrix_after_failure(dist, u, v):
    dist[u][v] = np.inf
    dist[v][u] = np.inf

def main():
    # Example 1
    n = 4
    edges = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]]
    dist = floyd_warshall(n, edges)
    print("\nCity 0 to City 3 =", find_shortest_path(dist, 0, 3))
    
    # Example 2
    n = 4
    edges = [[0, 1, 3], [0, 2, 8], [0, 3, -4], [1, 2, 6], [1, 3, 4], [2, 3, 2], [3, 1, 7], [3, 2, -5]]
    dist = floyd_warshall(n, edges)
    print("\nCity 1 to City 3 =", find_shortest_path(dist, 1, 2))
    
    # Example 3
    n = 6
    edges = [[0, 1, 1], [0, 2, 5], [1, 2, 2], [1, 3, 1], [2, 4, 3], [3, 4, 1], [3, 5, 6], [4, 5, 2]]
    dist = floyd_warshall(n, edges)
    print("\nRouter A to Router F =", find_shortest_path(dist, 0, 5))
    
    update_distance_matrix_after_failure(dist, 1, 3)
    print("\nDistance Matrix after Router B to Router D link failure:")
    print(dist)
    print("\nRouter A to Router F after failure =", find_shortest_path(dist, 0, 5))

if __name__ == "__main__":
    main()
